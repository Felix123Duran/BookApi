{
  "version": 3,
  "sources": ["../../../../../Modules/BookShop/Book/BookPage.ts", "../../../../../Modules/ServerTypes/BookShop/BookColumns.ts", "../../../../../Modules/ServerTypes/BookShop/BookForm.ts", "../../../../../Modules/ServerTypes/BookShop/BookRow.ts", "../../../../../Modules/ServerTypes/BookShop/BookService.ts", "../../../../../Modules/BookShop/Book/BookGrid.ts", "../../../../../Modules/BookShop/Book/BookDialog.ts"],
  "sourcesContent": ["\uFEFFimport { gridPageInit } from '@serenity-is/corelib';\r\nimport { BookGrid } from './BookGrid';\r\n\r\nexport default () => gridPageInit(BookGrid);", "\uFEFFimport { ColumnsBase, fieldsProxy } from \"@serenity-is/corelib\";\nimport { Column } from \"@serenity-is/sleekgrid\";\nimport { BookRow } from \"./BookRow\";\n\nexport interface BookColumns {\n    Id: Column<BookRow>;\n    Title: Column<BookRow>;\n    Description: Column<BookRow>;\n    PageCount: Column<BookRow>;\n    PublishDate: Column<BookRow>;\n    Excerpt: Column<BookRow>;\n}\n\nexport class BookColumns extends ColumnsBase<BookRow> {\n    static readonly columnsKey = 'BookShop.Book';\n    static readonly Fields = fieldsProxy<BookColumns>();\n}", "\uFEFFimport { StringEditor, IntegerEditor, DateEditor, PrefixedContext, initFormType } from \"@serenity-is/corelib\";\n\nexport interface BookForm {\n    Title: StringEditor;\n    Description: StringEditor;\n    PageCount: IntegerEditor;\n    PublishDate: DateEditor;\n    Excerpt: StringEditor;\n}\n\nexport class BookForm extends PrefixedContext {\n    static readonly formKey = 'BookShop.Book';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!BookForm.init)  {\n            BookForm.init = true;\n\n            var w0 = StringEditor;\n            var w1 = IntegerEditor;\n            var w2 = DateEditor;\n\n            initFormType(BookForm, [\n                'Title', w0,\n                'Description', w0,\n                'PageCount', w1,\n                'PublishDate', w2,\n                'Excerpt', w0\n            ]);\n        }\n    }\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib\";\n\nexport interface BookRow {\n    Id?: number;\n    Title?: string;\n    Description?: string;\n    PageCount?: number;\n    PublishDate?: string;\n    Excerpt?: string;\n}\n\nexport abstract class BookRow {\n    static readonly idProperty = 'Id';\n    static readonly nameProperty = 'Title';\n    static readonly localTextPrefix = 'BookShop.Book';\n    static readonly deletePermission = 'Administration:General';\n    static readonly insertPermission = 'Administration:General';\n    static readonly readPermission = 'Administration:General';\n    static readonly updatePermission = 'Administration:General';\n\n    static readonly Fields = fieldsProxy<BookRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib\";\nimport { FileContentResult } from \"../Microsoft/AspNetCore.Mvc.FileContentResult\";\nimport { BookRow } from \"./BookRow\";\n\nexport namespace BookService {\n    export const baseUrl = 'BookShop/Book';\n\n    export declare function Create(request: SaveRequest<BookRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): PromiseLike<SaveResponse>;\n    export declare function Update(request: SaveRequest<BookRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): PromiseLike<SaveResponse>;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): PromiseLike<DeleteResponse>;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<BookRow>) => void, opt?: ServiceOptions<any>): PromiseLike<RetrieveResponse<BookRow>>;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<BookRow>) => void, opt?: ServiceOptions<any>): PromiseLike<ListResponse<BookRow>>;\n    export declare function ListExcel(request: ListRequest, onSuccess?: (response: FileContentResult) => void, opt?: ServiceOptions<any>): PromiseLike<FileContentResult>;\n\n    export const Methods = {\n        Create: \"BookShop/Book/Create\",\n        Update: \"BookShop/Book/Update\",\n        Delete: \"BookShop/Book/Delete\",\n        Retrieve: \"BookShop/Book/Retrieve\",\n        List: \"BookShop/Book/List\",\n        ListExcel: \"BookShop/Book/ListExcel\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List', \n        'ListExcel'\n    ].forEach(x => {\n        (<any>BookService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { BookColumns, BookRow, BookService } from '@/ServerTypes/BookShop';\r\nimport { Decorators, EntityGrid } from '@serenity-is/corelib';\r\nimport { BookDialog } from './BookDialog';\r\n\r\n@Decorators.registerClass('Bookapp.BookShop.BookGrid')\nexport class BookGrid extends EntityGrid<BookRow> {\n    protected getColumnsKey() { return BookColumns.columnsKey; }\n    protected getDialogType() { return BookDialog; }\n    protected getRowDefinition() { return BookRow; }\n    protected getService() { return BookService.baseUrl; }\n}", "\uFEFFimport { BookForm, BookRow, BookService } from '@/ServerTypes/BookShop';\r\nimport { Decorators, EntityDialog } from '@serenity-is/corelib';\r\n\r\n@Decorators.registerClass('Bookapp.BookShop.BookDialog')\nexport class BookDialog extends EntityDialog<BookRow, any> {\n    protected getFormKey() { return BookForm.formKey; }\n    protected getRowDefinition() { return BookRow; }\n    protected getService() { return BookService.baseUrl; }\n\n    protected form = new BookForm(this.idPrefix);\n}"],
  "mappings": "0FAAC,IAAAA,EAA6B,SCA7B,IAAAC,EAAyC,SAanC,IAAMC,EAAN,MAAMA,UAAoB,aAAqB,CAGtD,EAHsDC,EAAAD,EAAA,eAAzCA,EACO,WAAa,gBADpBA,EAEO,UAAS,eAAyB,EAF/C,IAAME,EAANF,ECbN,IAAAG,EAAuF,SAUjF,IAAMC,EAAN,MAAMA,UAAiB,iBAAgB,CAI1C,YAAYC,EAAgB,CAGxB,GAFA,MAAMA,CAAM,EAER,CAACD,EAAS,KAAO,CACjBA,EAAS,KAAO,GAEhB,IAAIE,EAAK,eACLC,EAAK,gBACLC,EAAK,gBAET,gBAAaJ,EAAU,CACnB,QAASE,EACT,cAAeA,EACf,YAAaC,EACb,cAAeC,EACf,UAAWF,CACf,CAAC,CACL,CACJ,CACJ,EAvB8CG,EAAAL,EAAA,YAAjCA,EACO,QAAU,gBADvB,IAAMM,EAANN,ECVN,IAAAO,EAA4B,SAWtB,IAAeC,EAAf,MAAeA,CAAQ,CAU9B,EAV8BC,EAAAD,EAAA,WAARA,EACF,WAAa,KADXA,EAEF,aAAe,QAFbA,EAGF,gBAAkB,gBAHhBA,EAIF,iBAAmB,yBAJjBA,EAKF,iBAAmB,yBALjBA,EAMF,eAAiB,yBANfA,EAOF,iBAAmB,yBAPjBA,EASF,UAAS,eAAqB,EAT3C,IAAeE,EAAfF,ECXN,IAAAG,EAAuK,SAIvJC,OACAA,EAAA,QAAU,gBASVA,EAAA,QAAU,CACnB,OAAQ,uBACR,OAAQ,uBACR,OAAQ,uBACR,SAAU,yBACV,KAAM,qBACN,UAAW,yBACf,EAEA,CACI,SACA,SACA,SACA,WACA,OACA,WACJ,EAAE,QAAQC,GAAK,CACLD,EAAaC,CAAC,EAAI,SAAUC,EAAGC,EAAGC,EAAG,CACvC,SAAO,kBAAeJ,EAAA,QAAU,IAAMC,EAAGC,EAAGC,EAAGC,CAAC,CACpD,CACJ,CAAC,IA9BYJ,MAAA,KCHjB,IAAAK,EAAuC,SCAvC,IAAAC,EAAyC,SADzC,IAAAC,EAAAC,EAAAC,EAGAF,EAAA,CAAC,aAAW,cAAc,6BAA6B,GAChD,IAAMG,EAAN,MAAMA,UAAmBD,EAAA,eAA2B,CAApD,kCAKH,KAAU,KAAO,IAAIE,EAAS,KAAK,QAAQ,EAJjC,YAAa,CAAE,OAAOA,EAAS,OAAS,CACxC,kBAAmB,CAAE,OAAOC,CAAS,CACrC,YAAa,CAAE,OAAOC,EAAY,OAAS,CAGzD,EANOL,EAAAM,EAAAL,GAAMC,EAANK,EAAAP,EAAA,eADPD,EACaG,GAA8CM,EAAAN,EAAA,cAApDO,EAAAT,EAAA,EAAME,GAAN,IAAMQ,EAANR,EDJP,IAAAS,EAAAC,EAAAC,EAIAF,EAAA,CAAC,aAAW,cAAc,2BAA2B,GAC9C,IAAMG,EAAN,MAAMA,UAAiBD,EAAA,aAAoB,CACpC,eAAgB,CAAE,OAAOE,EAAY,UAAY,CACjD,eAAgB,CAAE,OAAOC,CAAY,CACrC,kBAAmB,CAAE,OAAOC,CAAS,CACrC,YAAa,CAAE,OAAOC,EAAY,OAAS,CACzD,EALON,EAAAO,EAAAN,GAAMC,EAANM,EAAAR,EAAA,aADPD,EACaG,GAAqCO,EAAAP,EAAA,YAA3CQ,EAAAV,EAAA,EAAME,GAAN,IAAMS,EAANT,ELFP,IAAOU,GAAQC,EAAA,OAAM,gBAAaC,CAAQ,EAA3B",
  "names": ["import_corelib", "import_corelib", "_BookColumns", "__name", "BookColumns", "import_corelib", "_BookForm", "prefix", "w0", "w1", "w2", "__name", "BookForm", "import_corelib", "_BookRow", "__name", "BookRow", "import_corelib", "BookService", "x", "r", "s", "o", "import_corelib", "import_corelib", "_BookDialog_decorators", "_init", "_a", "_BookDialog", "BookForm", "BookRow", "BookService", "__decoratorStart", "__decorateElement", "__name", "__runInitializers", "BookDialog", "_BookGrid_decorators", "_init", "_a", "_BookGrid", "BookColumns", "BookDialog", "BookRow", "BookService", "__decoratorStart", "__decorateElement", "__name", "__runInitializers", "BookGrid", "BookPage_default", "__name", "BookGrid"]
}
